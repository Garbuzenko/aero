#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from settings import DB_CONFIG
import sys
import json
import time
import logging
from pprint import pprint
from typing import Dict, Any, Optional
import requests
import mysql.connector
from mysql.connector import Error
from shapely.geometry import shape
import osm2geojson

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('../log/russia_boundaries_loader.log', encoding='utf-8')
    ]
)
logger = logging.getLogger(__name__)

# # === –ù–ê–°–¢–†–û–ô–ö–ò ===
# try:
#     from utils.settings import DB_CONFIG
# except ImportError:
#     logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª settings.py –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DB_CONFIG")
#     sys.exit(1)

OVERPASS_URL = "https://overpass-api.de/api/interpreter"

ADMIN_LEVELS = {
    "federal_districts": "4",
    "regions": "6",
    "municipalities": "8"
}

def get_admin_type(admin_level: str) -> str:
    mapping = {
        '2': '–°—Ç—Ä–∞–Ω–∞',
        '3': '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å–æ—é–∑',
        '4': '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥',
        '5': '–†–µ–≥–∏–æ–Ω (–≥—Ä—É–ø–ø–∞ —Å—É–±—ä–µ–∫—Ç–æ–≤)',
        '6': '–°—É–±—ä–µ–∫—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏',
        '7': '–ì–æ—Ä–æ–¥—Å–∫–æ–π –æ–∫—Ä—É–≥',
        '8': '–ú—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω',
        '9': '–ì–æ—Ä–æ–¥—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ',
        '10': '–°–µ–ª—å—Å–∫–æ–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ'
    }
    return mapping.get(admin_level, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')


def extract_geopolygon_coords(geom: dict) -> Optional[list]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç GeoJSON-–≥–µ–æ–º–µ—Ç—Ä–∏—é (Polygon –∏–ª–∏ MultiPolygon)
    –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ [[lat, lon], ...], –≥–æ—Ç–æ–≤—ã–π –¥–ª—è GEOPOLYGON –≤ DataLens.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    try:
        if geom['type'] == 'Polygon':
            # –û–¥–∏–Ω –ø–æ–ª–∏–≥–æ–Ω: –º–∞—Å—Å–∏–≤ –∫–æ–ª–µ—Ü (–≤–Ω–µ—à–Ω–µ–µ + –¥—ã—Ä–∫–∏)
            return [
                [[round(coord[1], 6), round(coord[0], 6)] for coord in ring]
                for ring in geom['coordinates']
            ]
        elif geom['type'] == 'MultiPolygon':
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: –∫–∞–∂–¥—ã–π ‚Äî –º–∞—Å—Å–∏–≤ –∫–æ–ª–µ—Ü
            result = []
            for polygon in geom['coordinates']:
                rings = [
                    [[round(coord[1], 6), round(coord[0], 6)] for coord in ring]
                    for ring in polygon
                ]
                result.extend(rings)  # DataLens –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–ª—å—Ü–∞ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
            return result
        else:
            return None
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏: {e}")
        return None

def calculate_area_km2(geom) -> float:
    try:
        shp = shape(geom)
        return max(round(shp.area * (111.0 ** 2), 2), 0.01)
    except:
        return 100.0


def fetch_osm_data(admin_level: str) -> Optional[Dict[Any, Any]]:
    query = f"""[out:json][timeout:600];
rel["ISO3166-1"="RU"]["admin_level"="2"];
map_to_area;
rel(area)["boundary"="administrative"]["admin_level"="{admin_level}"];
out geom;"""

    print(query)

    try:
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è {admin_level} –∫ Overpass API...")
        response = requests.post(
            OVERPASS_URL,
            data=query.encode('utf-8'),
            headers={'Content-Type': 'text/plain; charset=utf-8'},
            timeout=600
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ Overpass –¥–ª—è —É—Ä–æ–≤–Ω—è {admin_level}: {e}")
        return None


def process_and_save_to_db(geojson_data: Dict, admin_level: str):
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        cursor = conn.cursor()

        features = geojson_data.get('features', [])
        saved = 0
        for feature in features:
            props = feature.get('properties', {})
            geom = feature.get('geometry')
            if not geom or geom.get('type') not in ('Polygon', 'MultiPolygon'):
                continue

            polygon_coords = extract_geopolygon_coords(geom)
            if polygon_coords is None:
                continue

            shp = shape(geom)
            if not shp.is_valid:
                continue
            if shp.area > 0.01:
                shp = shp.simplify(0.001, preserve_topology=True)

            centroid = shp.centroid
            if centroid.is_valid:
                centroid_lat, centroid_lon = round(centroid.y, 6), round(centroid.x, 6)
            else:
                bounds = shp.bounds
                centroid_lat = round((bounds[1] + bounds[3]) / 2, 6)
                centroid_lon = round((bounds[0] + bounds[2]) / 2, 6)
            # pprint(props)
            name = props.get('tags').get('name:ru') or props.get('tags').props.get('name')
            if name:
                print(name)
            else:
                pprint(props)
            name_en = props.get('tags').get('name:en', '')
            population = 0
            pop_str = props.get('population', '')
            if isinstance(pop_str, str) and pop_str.isdigit():
                population = int(pop_str)
            elif isinstance(pop_str, (int, float)):
                population = int(pop_str)

            area_sq_km = calculate_area_km2(geom)

            insert_query = """
            INSERT INTO admin_boundaries 
            (osm_id, name, name_en, admin_level, admin_type, boundary_type, place_type,
             population, wikidata_id, wikipedia_url, polygon_coordinates,
             centroid_lat, centroid_lon, area_sq_km, polygon)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            """
            data = (
                props.get('id'),
                str(name)[:250],
                str(name_en)[:250] if name_en else None,
                admin_level,
                get_admin_type(admin_level),
                props.get('boundary', 'administrative'),
                props.get('place', None),
                population,
                props.get('wikidata', None),
                props.get('wikipedia', None),
                json.dumps(geom, ensure_ascii=False),
                centroid_lat,
                centroid_lon,
                area_sq_km,
                json.dumps(polygon_coords, ensure_ascii=False)
            )
            try:
                cursor.execute(insert_query, data)
                saved += 1
            except Error as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–±—ä–µ–∫—Ç–∞ {props.get('id')}: {e}")

        conn.commit()
        cursor.close()
        conn.close()
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved} –æ–±—ä–µ–∫—Ç–æ–≤ —É—Ä–æ–≤–Ω—è {admin_level}")

    except Error as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    print("üåç –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞–Ω–∏—Ü –†–æ—Å—Å–∏–∏ –≤ admin_boundaries")
    print("=" * 70)

    for level_name, admin_level in ADMIN_LEVELS.items():
        print(f"\nüì• –£—Ä–æ–≤–µ–Ω—å: {level_name} (admin_level={admin_level})")
        raw_data = fetch_osm_data(admin_level)
        if not raw_data:
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —É—Ä–æ–≤–Ω—è {admin_level} ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        try:
            geojson_data = osm2geojson.json2geojson(raw_data)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ GeoJSON: {e}")
            continue

        if not geojson_data.get('features'):
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É—Ä–æ–≤–Ω—è {admin_level}")
            continue

        process_and_save_to_db(geojson_data, admin_level)
        time.sleep(3)

    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ admin_boundaries.")


if __name__ == "__main__":
    main()